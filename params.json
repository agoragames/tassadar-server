{"body":"This simple rack-based web service uses the pure-ruby [Tassadar](https://github.com/agoragames/tassadar) library\r\nto parse uploaded Starcraft II replay files and send a JSON response.\r\n\r\nThis service is designed to enable Tassadar in polyglot or browser-based projects where Ruby may not be the significant language.\r\n\r\n# As a service\r\n\r\nFor your convenience, a public instance is provided, limited to 100 requests/hr. Visit [tassadar on Mashape](https://www.mashape.com/logankoester/tassadar) to grab an API key and the SDK for your language, then enjoy!\r\n\r\n# Run your own\r\n\r\n    $ gem install tassadar-server\r\n\r\n## Usage\r\n\r\n#### Options\r\n\r\nThe server can be configured using the following environment variables:\r\n\r\n| **Option** | **Description** | **Details** |\r\n|------------|-----------------|-------------|\r\n| THROTTLE   | Allowed requests per hour | for each user |\r\n| REDIS_URL | Redis server | required if THROTTLE is enabled |\r\n| WHITELIST | Comma-separated list of allowed IP addresses | Optional |\r\n| USER_HEADER | Header containing unique user id | defaults to IP address if not set |\r\n\r\n#### Start the server\r\n\r\n    $ rackup ./config.ru\r\n\r\nYou can also mount tassadar-server into a Rails 3 application, or use unicorn to set up a cluster of workers for increased load.\r\n\r\n#### Parse a replay\r\n\r\n    $ http -f POST http://localhost:9292/sc2/replay file@spec/replays/delta_quadrant.SC2Replay\r\n\r\n    POST /sc2/replay HTTP/1.1\r\n    Host: localhost:9292\r\n    Content-Type: multipart/form-data; boundary=cd85979359044d7cac045667d\r\n    cf591c3\r\n    Accept-Encoding: gzip, deflate, compress\r\n    Accept: */*\r\n    Content-Type: application/json\r\n    Content-Length: 633\r\n    Server: WEBrick/1.3.1 (Ruby/1.9.3/2012-04-20)\r\n    Date: Thu, 03 Jan 2013 01:32:21 GMT\r\n    Connection: Keep-Alive\r\n\r\n    {\"replay\":{\"game\":{\"category\":\"Ladder\",\"map\":\"Delta Quadrant\",\"speed\"\r\n    :\"Faster\",\"time\":\"2011-07-05 18:01:08 -0400\",\"type\":\"1v1\",\"winner\":{\"\r\n    actual_race\":\"Zerg\",\"chosen_race\":\"Zerg\",\"handicap\":100,\"id\":2569192,\r\n    \"name\":\"redgar\",\"won\":true,\"color\":{\"alpha\":255,\"red\":0,\"green\":66,\"b\r\n    lue\":255}}},\"players\":[{\"player\":{\"actual_race\":\"Terran\",\"chosen_race\r\n    \":\"Terran\",\"handicap\":100,\"id\":1918894,\"name\":\"guitsaru\",\"won\":false,\r\n    \"color\":{\"alpha\":255,\"red\":180,\"green\":20,\"blue\":30}}},{\"player\":{\"ac\r\n    tual_race\":\"Zerg\",\"chosen_race\":\"Zerg\",\"handicap\":100,\"id\":2569192,\"n\r\n    ame\":\"redgar\",\"won\":true,\"color\":{\"alpha\":255,\"red\":0,\"green\":66,\"blu\r\n    e\":255}}}]}}\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"tassadar-server","tagline":"Hassle-free Starcraft II replay parsing"}
